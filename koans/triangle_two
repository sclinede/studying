# You need to write the triangle method

class TriangleError < RuntimeError
end

def triangle(a, b, c)

  raise TriangleError, "Zero side" if a == 0 || b == 0 || c == 0
  raise TriangleError, "Zero side" if a < 0 || b < 0 || c < 0

  result = {}
  result.merge!({ a => hash_elem_iter(hash, a) })
  result.merge!({ b => hash_elem_iter(hash, b) })
  result.merge!({ c => hash_elem_iter(hash, c) })

  # same_length_as_other_two
  
  # one_side_too_long  
  raise TriangleError, "Side_too_long" if 

  case result.size
  when 1
    return :equilateral
  when 2     
    return :isosceles
  when 3
    return :scalene
  end  
end

def hash_elem_iter(hash, key, step = 1)
  hash[key] ? hash[key] + step : 1
end
